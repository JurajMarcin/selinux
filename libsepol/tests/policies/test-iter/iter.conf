class CLASS1
class CLASS01
class CLASS02
class CLASS03
class CLASS04
class CLASS05
class CLASS06

sid kernel

common COMMON1 { COMMONPERM1 }

class CLASS1 inherits COMMON1 { PERM1 }
class CLASS01 { PERM01 }
class CLASS02 { PERM02 }
class CLASS03 { PERM03 }
class CLASS04 { PERM04 }
class CLASS05 { PERM05 }
class CLASS06 { PERM06 }

ifdef(`enable_mls',`

sensitivity s0;

#
# Define the ordering of the sensitivity levels (least to greatest)
#
dominance { s0 }


#
# Define the categories
#
# Each category has a name and zero or more aliases.
#
category c0; category c1; category c2; category c3;

level s0:c0.c3;

mlsconstrain CLASS1 { PERM1 }
	( h1 dom h2 );
')

type TYPE1;
type TYPE2;
type TYPE3;

typealias TYPE1 alias ALIAS1;
typealias TYPE3 alias ALIAS2;

attribute ATTR1;
typeattribute TYPE2 ATTR1;
typeattribute TYPE3 ATTR1;

permissive TYPE1;

allow TYPE1 self : CLASS1 { PERM1 };
allow TYPE1 TYPE2 : CLASS01 { PERM01 };
allow TYPE3 ATTR1 : CLASS02 { PERM02 };
allow TYPE1 TYPE3 : CLASS03 { PERM03 };

role ROLE1;
role ROLE1 types { TYPE1 };
role ROLE2;
role ROLE2 types { TYPE2 };

attribute_role ATTR_ROLE1;
roleattribute ROLE1 ATTR_ROLE1;
roleattribute ROLE2 ATTR_ROLE1;

gen_user(USER1,, ROLE1, s0, s0 - s0:c0.c3)

constrain CLASS1 { PERM1 } ( t1 == { TYPE1 } );
constrain CLASS1 { PERM1 } (
    ( r1 == ROLE1 ) or
    ( u2 == USER1 )
);

sid kernel	gen_context(USER1:ROLE1:TYPE1, s0)
